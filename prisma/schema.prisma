// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
  questions     Question[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String?
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?
  sessionToken String   @unique @db.Text
  accessToken  String?  @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Form {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  published Boolean    @default(false)
  answers   Answer[]
}

model Question {
  formId      String
  form        Form     @relation(fields: [formId], references: [id])
  id          String   @id @default(cuid())
  text        String   @default("")
  placeholder String   @default("")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int
  answers     Answer[]
  type        String
  options     Option[]
}

model Response {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submittedAt DateTime
  answers     Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answerText String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  responseId String
  response   Response @relation(fields: [responseId], references: [id])
  options    Option[]
}

model Option {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId String
  optionText String
  question   Question @relation(fields: [questionId], references: [id])
  order      Int
  answer     Answer[]
}
